{"version":3,"sources":["Components/ImageSearchForm/ImageSearchForm.js","Components/FaceDetect/FaceDetect.js","App/App.js","serviceWorker.js","index.js"],"names":["ImageSearchForm","onInputChange","onSubmit","className","type","onChange","placeholder","onClick","FaceDetect","imageUrl","box","id","alt","src","width","height","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","app","Clarifai","App","apiKey","keys","clarifaiKeys","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","event","input","target","value","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6bAwBeA,G,MArBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,SAAlB,OACpB,yBAAKC,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,gCACb,2BACEA,UAAU,qBACVC,KAAK,OACLC,SAAUJ,EACVK,YAAY,mBAEd,4BACEH,UAAU,8CACVI,QAASL,GAFX,eCSKM,G,MAnBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,IAAb,OACf,yBAAKP,UAAU,aACb,yBAAKA,UAAU,gBACb,yBAAKQ,GAAG,aAAaC,IAAI,GAAGC,IAAKJ,EAAUK,MAAM,QAAQC,OAAO,SAClE,yBACEZ,UAAU,eAEVa,MAAO,CACLC,IAAKP,EAAIQ,OACTC,MAAOT,EAAIU,SACXC,OAAQX,EAAIY,UACZC,KAAMb,EAAIc,eCPdC,G,MAAM,IAAIC,IAASC,IAAI,CAC3BC,OAAQC,EAAKC,aAAaF,UAuDbD,E,kDAnDb,aAAe,IAAD,8BACZ,gBAQFI,sBAAwB,SAACC,GACvB,IAAMC,EAAeD,EAAKE,QAAQ,GAAGF,KAAKG,QAAQ,GAAGC,YAAYC,aAC3DC,EAAQC,SAASC,eAAe,cAChC1B,EAAQ2B,OAAOH,EAAMxB,OACrBC,EAAS0B,OAAOH,EAAMvB,QAC5B,MAAO,CACLS,QAASS,EAAaS,SAAW5B,EACjCI,OAAQe,EAAaU,QAAU5B,EAC/BK,SAAUN,EAAQmB,EAAaW,UAAY9B,EAC3CQ,UAAWP,EAASkB,EAAaY,WAAa9B,IAlBpC,EAsBd+B,eAAiB,SAACpC,GAChB,EAAKqC,SAAS,CAAErC,SAvBJ,EA0BdT,cAAgB,SAAC+C,GACf,EAAKD,SAAS,CAAEE,MAAOD,EAAME,OAAOC,SA3BxB,EA8BdjD,SAAW,WACT,EAAK6C,SAAS,CAAEtC,SAAU,EAAK2C,MAAMH,QACrCxB,EAAI4B,OACDC,QAAQ5B,IAAS6B,kBAAmB,EAAKH,MAAMH,OAC/CO,MAAK,SAACC,GAAD,OAAc,EAAKX,eAAe,EAAKf,sBAAsB0B,OAClEC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,OAjC9B,EAAKP,MAAQ,CACXH,MAAO,GACPxC,SAAU,GACVC,IAAK,IALK,E,qDAuCZ,OACA,yBAAKP,UAAU,OACb,kBAAC,EAAD,CACEF,cAAe6D,KAAK7D,cACpBC,SAAU4D,KAAK5D,WAEjB,kBAAC,EAAD,CAAYQ,IAAKoD,KAAKV,MAAM1C,IAAKD,SAAUqD,KAAKV,MAAM3C,gB,GA9C1CsD,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASC,eAAe,SDwHpB,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLjB,QAAQiB,MAAMA,EAAMC,c","file":"static/js/main.d62580cc.chunk.js","sourcesContent":["import React from 'react';\nimport './ImageSearchForm.css';\n\nconst ImageSearchForm = ({ onInputChange, onSubmit }) => (\n    <div className=\"ma5 mto\">\n      <div className=\"center\">\n        <div className=\"form center pa4 br3 shadow-5\">\n          <input\n            className=\"f4 pa2 w-70 center\"\n            type=\"text\"\n            onChange={onInputChange}\n            placeholder=\"Paste url here\"\n          />\n          <button\n            className=\"w-30 grow f4 link ph3 pv2 dib white bg-blue\"\n            onClick={onSubmit\n            }>\n            Detect\n          </button>\n        </div>\n      </div>\n  </div>\n);\n\nexport default ImageSearchForm;\n","import React from 'react';\nimport './FaceDetect.css';\n\nconst FaceDetect = ({ imageUrl, box }) => (\n    <div className=\"center ma\">\n      <div className=\"absolute mt2\">\n        <img id=\"inputimage\" alt=\"\" src={imageUrl} width=\"500px\" height=\"auto\" />\n      <div\n        className=\"bounding-box\"\n\n        style={{\n          top: box.topRow,\n          right: box.rightCol,\n          bottom: box.bottomRow,\n          left: box.leftCol,\n        }}\n        >\n      </div>\n      </div>\n    </div>\n);\n\nexport default FaceDetect;\n","import React, { Component } from 'react';\nimport Clarifai from 'clarifai';\nimport keys from '../helpers/apiKeys.json';\nimport ImageSearchForm from '../Components/ImageSearchForm/ImageSearchForm';\nimport FaceDetect from '../Components/FaceDetect/FaceDetect';\nimport './App.css';\n\nconst app = new Clarifai.App({\n  apiKey: keys.clarifaiKeys.apiKey,\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n    };\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - clarifaiFace.right_col * width,\n      bottomRow: height - clarifaiFace.bottom_row * height,\n    };\n  };\n\n  displayFaceBox = (box) => {\n    this.setState({ box });\n  };\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value });\n  };\n\n  onSubmit = () => {\n    this.setState({ imageUrl: this.state.input });\n    app.models\n      .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      .then((response) => this.displayFaceBox(this.calculateFaceLocation(response)))\n      .catch((err) => console.log(err));\n  };\n\n  render() {\n    return (\n    <div className=\"App\">\n      <ImageSearchForm\n        onInputChange={this.onInputChange}\n        onSubmit={this.onSubmit}\n      />\n      <FaceDetect box={this.state.box} imageUrl={this.state.imageUrl} />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}